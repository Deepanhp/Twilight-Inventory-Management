<body class="hold-transition skin-blue sidebar-mini">
  <div class="wrapper">
    <%= render 'layouts/header' %>

    <div class="content-wrapper">
      <section class="content-header">
        <h1>Dashboard</h1>
      </section>

      <section class="content">
        <!-- Low Stock Items -->
        <div class="row">
          <div class="col-md-12">
            <%= render 'low_stock_carousel' %>
          </div>
        </div>

        <!-- Category-wise Stock Charts with Sorting -->
        <div class="row">
          <% @categories.each do |category| %>
            <div class="col-md-4">
              <div class="box box-info">
                <div class="box-header with-border">
                  <h3 class="box-title"><%= category.name %> Stock</h3>

                  <!-- Individual Sorting Dropdown -->
                  <select class="chart-sort" data-category-id="<%= category.id %>">
                    <option value="quantity-asc">Quantity: Low to High</option>
                    <option value="quantity-desc">Quantity: High to Low</option>
                    <option value="measurement-asc">Measurement: Low to High</option>
                    <option value="measurement-desc">Measurement: High to Low</option>
                  </select>
                </div>
                <div class="box-body">
                  <canvas id="categoryChart-<%= category.id %>"></canvas>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </section>
    </div>
  </div>

  <style>
    .chart-sort {
      float: right;
      margin-top: -5px;
    }
  </style>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      let chartInstances = {}; // Store all charts

      // Initialize charts
      <% @categories.each do |category| %>
        fetchAndCreateChart(<%= category.id %>, "quantity-asc");
      <% end %>

      // Handle sorting per chart
      document.querySelectorAll(".chart-sort").forEach(select => {
        select.addEventListener("change", function () {
          const categoryId = this.getAttribute("data-category-id");
          const sortBy = this.value;
          fetchAndCreateChart(categoryId, sortBy);
        });
      });

      function fetchAndCreateChart(categoryId, sortBy) {
        fetch(`/update_chart?category_id=${categoryId}&sort_by=${sortBy}`)
          .then(response => response.json())
          .then(data => {
            const canvas = document.getElementById(`categoryChart-${categoryId}`);
            if (!canvas) return;

            const ctx = canvas.getContext("2d");

            // Destroy previous chart instance if it exists
            if (chartInstances[categoryId]) {
              chartInstances[categoryId].destroy();
            }

            // Prepare labels with measurement units
            const labels = data.items.map(item => {
              const measurement = Object.entries(item.measurement || {})[0] || ["N/A", 0];
              return `${item.display_name} (${item.remaining_quantity}))`;
            });

            // Create new chart
            chartInstances[categoryId] = new Chart(ctx, {
              type: "pie",
              data: {
                labels: labels,
                datasets: [{
                  label: "Stock Count",
                  data: data.items.map(item => item.remaining_quantity),
                  backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56", "#4CAF50"],
                  hoverOffset: 10
                }]
              },
              options: {
                animation: {
                  animateRotate: true,
                  animateScale: true
                }
              }
            });
          })
          .catch(error => console.error("Error fetching chart data:", error));
      }
    });
  </script>
</body>
